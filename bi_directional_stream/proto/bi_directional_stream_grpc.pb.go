// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	//*
	// Define a service name StreamedMessages which will become available in
	// the bi_directional_stream server. This service takes a request from the
	// type MessageRequest which contain a single Message object. This Message
	// object contains a name from the sender and the message itself. The
	// server will handle this request and will respond with a response from
	// the type MessageResponse. This response object will contain a single
	// result string which will be read by the bi_directional_stream client.
	StreamedMessages(ctx context.Context, opts ...grpc.CallOption) (Services_StreamedMessagesClient, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) StreamedMessages(ctx context.Context, opts ...grpc.CallOption) (Services_StreamedMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Services_ServiceDesc.Streams[0], "/server_stream.Services/StreamedMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesStreamedMessagesClient{stream}
	return x, nil
}

type Services_StreamedMessagesClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type servicesStreamedMessagesClient struct {
	grpc.ClientStream
}

func (x *servicesStreamedMessagesClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesStreamedMessagesClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServicesServer is the server API for Services service.
// All implementations must embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	//*
	// Define a service name StreamedMessages which will become available in
	// the bi_directional_stream server. This service takes a request from the
	// type MessageRequest which contain a single Message object. This Message
	// object contains a name from the sender and the message itself. The
	// server will handle this request and will respond with a response from
	// the type MessageResponse. This response object will contain a single
	// result string which will be read by the bi_directional_stream client.
	StreamedMessages(Services_StreamedMessagesServer) error
	mustEmbedUnimplementedServicesServer()
}

// UnimplementedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (UnimplementedServicesServer) StreamedMessages(Services_StreamedMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamedMessages not implemented")
}
func (UnimplementedServicesServer) mustEmbedUnimplementedServicesServer() {}

// UnsafeServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServer will
// result in compilation errors.
type UnsafeServicesServer interface {
	mustEmbedUnimplementedServicesServer()
}

func RegisterServicesServer(s grpc.ServiceRegistrar, srv ServicesServer) {
	s.RegisterService(&Services_ServiceDesc, srv)
}

func _Services_StreamedMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesServer).StreamedMessages(&servicesStreamedMessagesServer{stream})
}

type Services_StreamedMessagesServer interface {
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type servicesStreamedMessagesServer struct {
	grpc.ServerStream
}

func (x *servicesStreamedMessagesServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesStreamedMessagesServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Services_ServiceDesc is the grpc.ServiceDesc for Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server_stream.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamedMessages",
			Handler:       _Services_StreamedMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/bi_directional_stream.proto",
}
