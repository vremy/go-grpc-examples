// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	//*
	// Define a service name StoreMessage which will become available in the
	// unary server. This service takes a request from the type MessageRequest
	// which contain a single Message object. This Message object contains a
	// name from the sender and the message itself. The server will handle this
	// request and will respond with a response from the type MessageResponse.
	// This response object will contain a single result string which will be
	// read by the unary client.
	GetStreamedMessages(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (Services_GetStreamedMessagesClient, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) GetStreamedMessages(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (Services_GetStreamedMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Services_ServiceDesc.Streams[0], "/server_stream.Services/GetStreamedMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesGetStreamedMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Services_GetStreamedMessagesClient interface {
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type servicesGetStreamedMessagesClient struct {
	grpc.ClientStream
}

func (x *servicesGetStreamedMessagesClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServicesServer is the server API for Services service.
// All implementations must embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	//*
	// Define a service name StoreMessage which will become available in the
	// unary server. This service takes a request from the type MessageRequest
	// which contain a single Message object. This Message object contains a
	// name from the sender and the message itself. The server will handle this
	// request and will respond with a response from the type MessageResponse.
	// This response object will contain a single result string which will be
	// read by the unary client.
	GetStreamedMessages(*MessageRequest, Services_GetStreamedMessagesServer) error
	mustEmbedUnimplementedServicesServer()
}

// UnimplementedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (UnimplementedServicesServer) GetStreamedMessages(*MessageRequest, Services_GetStreamedMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStreamedMessages not implemented")
}
func (UnimplementedServicesServer) mustEmbedUnimplementedServicesServer() {}

// UnsafeServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServer will
// result in compilation errors.
type UnsafeServicesServer interface {
	mustEmbedUnimplementedServicesServer()
}

func RegisterServicesServer(s grpc.ServiceRegistrar, srv ServicesServer) {
	s.RegisterService(&Services_ServiceDesc, srv)
}

func _Services_GetStreamedMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicesServer).GetStreamedMessages(m, &servicesGetStreamedMessagesServer{stream})
}

type Services_GetStreamedMessagesServer interface {
	Send(*MessageResponse) error
	grpc.ServerStream
}

type servicesGetStreamedMessagesServer struct {
	grpc.ServerStream
}

func (x *servicesGetStreamedMessagesServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Services_ServiceDesc is the grpc.ServiceDesc for Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server_stream.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStreamedMessages",
			Handler:       _Services_GetStreamedMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/server_stream.proto",
}
